///<reference path="../_references.ts"/>
var extend = require('extend');
var gutil = require('gulp-util');
var through2 = require('through2');
var path = require('path');
var chokidar = require('chokidar');
var vfs = require('vinyl-fs');
var PluginError = gutil.PluginError;
var watcherEvents = ['add', 'change', 'unlink', 'addDir', 'unlinkDir', 'error', 'ready', 'raw'];
// normalizeGlobs()  from https://github.com/floatdrop/gulp-watch/blob/master/index.js
function normalizeGlobs(globs) {
    if (!globs) {
        throw new PluginError('gulp-watch-dir', 'glob option required');
    }
    if (typeof globs === 'string') {
        globs = [globs];
    }
    if (!Array.isArray(globs)) {
        throw new PluginError('gulp-watch-dir', 'glob should be String or Array, not ' + (typeof globs));
    }
    return globs;
}
function processEvent(callback, ev, inputFile, filepath) {
    var _this = this;
    gutil.log("File system event " + gutil.colors.magenta(ev) + " for file " + gutil.colors.magenta(filepath));
    var file = vfs.src(filepath)
        .on('data', function () { return _this.push(inputFile); })
        .on('error', this.emit.bind(this, 'error'))
        .on('end', function () {
        gutil.log("File " + gutil.colors.magenta(filepath) + " read.");
        if (callback) {
            callback(ev, inputFile, filepath);
        }
    });
}
function watchdir(glob, options, callback) {
    if (!glob) {
        throw new PluginError('gulp-watch-dir', 'glob argument required');
    }
    glob = normalizeGlobs(glob);
    var args = {};
    [options, callback].slice(1, 2).forEach(function (a) { return args[typeof a] = a; });
    callback = args["function"];
    options = extend({
        map: function (f) { return f.path; },
        events: ['add', 'change', 'unlink']
    }, args["object"] || {});
    return through2.obj(function (file, encoding, done) {
        var _this = this;
        var dir = file.isDirectory()
            ? file.path
            : path.dirname(file.path);
        var relativeGlob = glob.map(function (g) { return path.join(dir, g); });
        if (options.verbose) {
            gutil.log("Watching directory " + gutil.colors.magenta(dir) + ":\r\n" + JSON.stringify(relativeGlob, null, 4));
        }
        var watcher = chokidar.watch(relativeGlob, options);
        options.events.forEach(function (ev) { return watcher.on(ev, processEvent.bind(_this, callback, ev, file)); });
        watcherEvents.forEach(function (ev) { return watcher.on(ev, _this.emit.bind(_this, ev)); });
        this.unwatch = watcher.unwatch.bind(watcher);
        this.close = function () {
            watcher.close();
            _this.emit('end');
        };
    });
}
module.exports = watchdir;

//# sourceMappingURL=data:application/json;base64,
