///<reference path="../_references.ts"/>
var gulp = require("gulp");
var path = require("path");
var Vinyl = require("vinyl");
var watchdir = require("gulp-watch-dir");
var watch = require("gulp-watch");
var fs = require("fs");
var through2 = require("through2");
var gutil = require("gulp-util");
var reload = require("require-reload")(require);
var prettyTime = require("pretty-time");
var chalk = require("chalk");
var argv = require("yargs")
    .default("task", "default")
    .argv;
var gulpfiles = {};
// Format orchestrator errors
function formatError(e) {
    if (!e.err) {
        return e.message;
    }
    // PluginError
    if (typeof e.err.showStack === "boolean") {
        return e.err.toString();
    }
    // Normal error
    if (e.err.stack) {
        return e.err.stack;
    }
    // Unknown (string, number, etc.)
    return new Error(String(e.err)).stack;
}
// Wire up logging events
function logEvents(gulpInst) {
    // Total hack due to poor error management in orchestrator
    gulpInst.on("err", function () {
        //failed = true;
    });
    gulpInst.on("task_start", function (e) {
        // TODO: batch these
        // so when 5 tasks start at once it only logs one time with all 5
        gutil.log("Starting", "\"" + chalk.cyan(e.task) + "\"...");
    });
    gulpInst.on("task_stop", function (e) {
        var time = prettyTime(e.hrDuration);
        gutil.log("Finished", "\"" + chalk.cyan(e.task) + "\"", "after", chalk.magenta(time));
    });
    gulpInst.on("task_err", function (e) {
        var msg = formatError(e);
        var time = prettyTime(e.hrDuration);
        gutil.log("\"" + chalk.cyan(e.task) + "\"", chalk.red("errored after"), chalk.magenta(time));
        gutil.log(msg);
    });
    gulpInst.on("task_not_found", function (err) {
        gutil.log(chalk.red("Task \"" + err.task + "\" is not in your gulpfile"));
        gutil.log("Please check the documentation for proper gulpfile formatting");
    });
}
gulp.task("test", function () {
    return gulp.src("projects/**/project.xml")
        .pipe(watchdir("**/*.js", {
        ignoreInitial: false,
        verbose: true,
        awaitWriteFinish: { stabilityThreshold: 500 }
    }))
        .pipe(through2.obj(function (f, _, cb) {
        console.log("**** " + f.path);
        var dir = path.dirname(f.path);
        var filepath = path.join(dir, "gulpfile.js");
        this.push(new Vinyl({
            cwd: dir,
            base: dir,
            path: filepath,
            content: fs.createReadStream(filepath)
        }));
        cb();
    }))
        .pipe(through2.obj(function (file, encoding, cb) {
        var _this = this;
        if (gulpfiles[file.path]) {
            gulpfiles[file.path].stop();
            gulpfiles[file.path] = null;
        }
        var gulpfile = reload(file.path);
        logEvents(gulpfile);
        gulpfiles[file.path] = gulpfile;
        process.chdir(path.dirname(file.path));
        setTimeout(function () {
            return gulpfile.start(argv.task, function () {
                gulpfiles[file.path] = null;
                _this.push(file);
                cb();
            });
        }, 0);
    }));
});

//# sourceMappingURL=data:application/json;base64,
